"""Notification database changed

Revision ID: 45422f2df3c4
Revises: 
Create Date: 2024-11-16 12:48:51.907131

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from notification.models import NotificationType

# revision identifiers, used by Alembic.
revision: str = "45422f2df3c4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "BlockedUser",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('\"BlockedUser_id_seq\"'::regclass)"),
    )
    op.add_column("notifications", sa.Column("is_read", sa.Boolean(), nullable=False))
    op.add_column("notifications", sa.Column("read_at", sa.String(), nullable=True))
    op.execute(
        f"CREATE TYPE notification_type AS ENUM {tuple(notification.value for notification in NotificationType)};"
    )
    op.add_column(
        "notifications",
        sa.Column(
            "notification_type",
            postgresql.ENUM(
                "FRIEND_REQUEST",
                "FRIEND_REQUEST_ACCEPTED",
                "FRIEND_REQUEST_REJECTED",
                "FRIEND_REQUEST_CANCELED",
                "BLOCK_FRIEND",
                "UNBLOCK_FRIEND",
                "UNFRIEND",
                name="notification_type",
            ),
            nullable=False,
        ),
    )
    op.add_column("notifications", sa.Column("sender_id", sa.Integer(), nullable=False))
    op.add_column("notifications", sa.Column("reciver_id", sa.Integer(), nullable=True))
    op.add_column(
        "notifications",
        sa.Column(
            "extra_data", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
    )
    op.add_column(
        "notifications",
        sa.Column("linked_notification_id", sa.Integer(), nullable=True),
    )
    op.drop_constraint(
        "notifications_user_id_fkey", "notifications", type_="foreignkey"
    )
    op.drop_constraint(
        "notifications_request_id_fkey", "notifications", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "notifications",
        "notifications",
        ["linked_notification_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None, "notifications", "users", ["reciver_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "notifications", "users", ["sender_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("notifications", "user_id")
    op.drop_column("notifications", "is_active")
    op.drop_column("notifications", "type")
    op.drop_column("notifications", "is_canceled")
    op.drop_column("notifications", "title")
    op.drop_column("notifications", "request_id")
    op.drop_column("notifications", "read")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "notifications",
        sa.Column("read", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "notifications",
        sa.Column("request_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "notifications",
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "notifications",
        sa.Column("is_canceled", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "notifications",
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "notifications",
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "notifications",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "notifications", type_="foreignkey")
    op.drop_constraint(None, "notifications", type_="foreignkey")
    op.drop_constraint(None, "notifications", type_="foreignkey")
    op.create_foreign_key(
        "notifications_request_id_fkey",
        "notifications",
        "users",
        ["request_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "notifications_user_id_fkey",
        "notifications",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("notifications", "linked_notification_id")
    op.drop_column("notifications", "extra_data")
    op.drop_column("notifications", "reciver_id")
    op.drop_column("notifications", "sender_id")
    op.drop_column("notifications", "notification_type")
    op.drop_column("notifications", "read_at")
    op.drop_column("notifications", "is_read")
    op.alter_column(
        "BlockedUser",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('\"BlockedUser_id_seq\"'::regclass)"),
    )
    # ### end Alembic commands ###
